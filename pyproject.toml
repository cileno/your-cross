[project]
name = "your-cross"
version = "0.1.1"
description = "Sistema web para gerenciamento de academia de crossfit"
authors = [
{name = "cileno", email = "cileno12@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.12,<4.0"
dependencies = [
"django >=5.2.2,<6.0.0",
"psycopg2-binary >=2.9.10,<3.0.0",
"python-decouple >=3.8,<4.0",
"django-environ >=0.12.0,<0.13.0",
"django-extensions >=4.1,<5.0",
"pandas >=2.2.3,<3.0.0",
"openpyxl >=3.1.5,<4.0.0",
"requests >=2.32.3,<3.0.0"
]

[tool.poetry]
packages = [{include = "your_cross", from = "src"}]

[tool.poetry.group.dev.dependencies]
pytest = "^8.4"
pytest-django = "^4.11.1"
factory-boy = "^3.3.3"
coverage = "^7.8.2"
isort = "^6.0.1"
ruff = "^0.4.5"
taskipy = "^1.14.1"
commitizen = "^4.8.2"
flake8 = "^7.2.0"
black = "^25.1.0"
mypy = "^1.16.0"
pre-commit = "^4.2.0"
pytest-cov = "^6.1.1"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.3"
mkdocs-material = "^9.5.14"
mkdocstrings = {extras = ["python"], version = "^0.29.1"}
mkdocs-autorefs = "^1.4.2"
mkdocs-include-markdown-plugin = "^7.1.5"
mkdocs-gen-files = "^0.5.0"
mkdocs-puml = "^2.3.0"
mkdocs-mermaid2-plugin = "^1.2.1"

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
known_first_party = ["config", "core", "aparelhos", "contratos", "autenticacao"]

[tool.blue]
line-length = 88

[tool.ruff]
line-length = 88
exclude = [".venv", "migrations"]
lint.select = ["E", "F"]
lint.ignore = ["E501"]

# 🎯 Tarefas automatizadas com Taskipy
[tool.taskipy.tasks]

    # 🧹 Formatação e lint do código Python (isort, blue, ruff)
    # lint = "isort . && blue . && ruff check ."
lint = "isort . && black . && ruff check ."

    # 🧪 Roda os testes com pytest e configuração django
test = "pytest --ds=config.settings"

    # 🧾 Gera o relatório de cobertura dos testes
coverage = "coverage run -m pytest && coverage report -m"
coverage-html = "coverage html -d docs/cobertura"

# 📚 Roda o servidor local da documentação MkDocs
docs = "mkdocs serve"

# 📁 Gera pasta site/ com a documentação
docs-build = "mkdocs build"

# 📄 Gera arquivos de referência da API com mkdocstrings
docs-ref = "python docs/gen_reference.py"

# 🧾 Gera toda a documentação (referência + build)
docs-full = "task docs-ref && task docs-build"

# 📝 Gera changelog com base nos commits convencionais
changelog = "cz changelog"

#
version = "poetry version -s"

# 🖋️ Formatação e lint do código Python (isort, blue, ruff)
changelog-docs = "cp scripts/docs_changelog_beautificado.md docs/changelog.md"

# 🚀 Tarefa completa: cz bump + changelog + changelog bonitinho + commit + push + site local
release = "cz bump && cz changelog && cp scripts/docs_changelog_beautificado.md docs/changelog.md && git add . && git commit -m 'chore(release): nova versão com changelog no site' && git push origin main --tags && mkdocs serve"
# release = "cz bump && cz changelog && git add . && git commit -m 'chore(release): nova versão' && git push origin main --tags"

# Atualizar o taskfile com a task clean-history
clean-history = 'git filter-repo --path chrome/ --invert-paths'


[tool.poetry.plugins."poetry.application.plugin"]
taskipy = "taskipy.plugin:TaskipyPlugin"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.3.0"
tag_format = "v$version"
version_files = ["pyproject.toml"]
changelog_file = "CHANGELOG.md"